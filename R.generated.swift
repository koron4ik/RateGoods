//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "background")
    /// Image `facebook`.
    static let facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook")
    /// Image `favourite`.
    static let favourite = Rswift.ImageResource(bundle: R.hostingBundle, name: "favourite")
    /// Image `google`.
    static let google = Rswift.ImageResource(bundle: R.hostingBundle, name: "google")
    /// Image `placeholder_image`.
    static let placeholder_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_image")
    /// Image `unfavourite`.
    static let unfavourite = Rswift.ImageResource(bundle: R.hostingBundle, name: "unfavourite")
    
    /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "facebook", bundle: ..., traitCollection: ...)`
    static func facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "favourite", bundle: ..., traitCollection: ...)`
    static func favourite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favourite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "google", bundle: ..., traitCollection: ...)`
    static func google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.google, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder_image", bundle: ..., traitCollection: ...)`
    static func placeholder_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unfavourite", bundle: ..., traitCollection: ...)`
    static func unfavourite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unfavourite, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `AdditionalView`.
    static let additionalView = _R.nib._AdditionalView()
    /// Nib `MainView`.
    static let mainView = _R.nib._MainView()
    /// Nib `ReviewView`.
    static let reviewView = _R.nib._ReviewView()
    /// Nib `StoreAddingPanel`.
    static let storeAddingPanel = _R.nib._StoreAddingPanel()
    /// Nib `StoreInfoPanel`.
    static let storeInfoPanel = _R.nib._StoreInfoPanel()
    
    /// `UINib(name: "AdditionalView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.additionalView) instead")
    static func additionalView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.additionalView)
    }
    
    /// `UINib(name: "MainView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mainView) instead")
    static func mainView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainView)
    }
    
    /// `UINib(name: "ReviewView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reviewView) instead")
    static func reviewView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reviewView)
    }
    
    /// `UINib(name: "StoreAddingPanel", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.storeAddingPanel) instead")
    static func storeAddingPanel(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.storeAddingPanel)
    }
    
    /// `UINib(name: "StoreInfoPanel", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.storeInfoPanel) instead")
    static func storeInfoPanel(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.storeInfoPanel)
    }
    
    static func additionalView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AdditionalView? {
      return R.nib.additionalView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AdditionalView
    }
    
    static func mainView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MainView? {
      return R.nib.mainView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MainView
    }
    
    static func reviewView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReviewView? {
      return R.nib.reviewView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReviewView
    }
    
    static func storeAddingPanel(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StoreAddingPanel? {
      return R.nib.storeAddingPanel.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StoreAddingPanel
    }
    
    static func storeInfoPanel(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StoreInfoPanel? {
      return R.nib.storeInfoPanel.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StoreInfoPanel
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `GoodsCell`.
    static let goodsCell: Rswift.ReuseIdentifier<GoodsCell> = Rswift.ReuseIdentifier(identifier: "GoodsCell")
    /// Reuse identifier `ReviewCell`.
    static let reviewCell: Rswift.ReuseIdentifier<ReviewCell> = Rswift.ReuseIdentifier(identifier: "ReviewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 9 storyboards.
  struct storyboard {
    /// Storyboard `Favourites`.
    static let favourites = _R.storyboard.favourites()
    /// Storyboard `Goods`.
    static let goods = _R.storyboard.goods()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Map`.
    static let map = _R.storyboard.map()
    /// Storyboard `Popular`.
    static let popular = _R.storyboard.popular()
    /// Storyboard `Reviews`.
    static let reviews = _R.storyboard.reviews()
    /// Storyboard `Search`.
    static let search = _R.storyboard.search()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    
    /// `UIStoryboard(name: "Favourites", bundle: ...)`
    static func favourites(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.favourites)
    }
    
    /// `UIStoryboard(name: "Goods", bundle: ...)`
    static func goods(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.goods)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Map", bundle: ...)`
    static func map(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.map)
    }
    
    /// `UIStoryboard(name: "Popular", bundle: ...)`
    static func popular(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.popular)
    }
    
    /// `UIStoryboard(name: "Reviews", bundle: ...)`
    static func reviews(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.reviews)
    }
    
    /// `UIStoryboard(name: "Search", bundle: ...)`
    static func search(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.search)
    }
    
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AdditionalView.validate()
      try _MainView.validate()
      try _StoreAddingPanel.validate()
      try _StoreInfoPanel.validate()
    }
    
    struct _AdditionalView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AdditionalView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AdditionalView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AdditionalView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_image' is used in nib 'AdditionalView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MainView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MainView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MainView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MainView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_image' is used in nib 'MainView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unfavourite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unfavourite' is used in nib 'MainView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ReviewView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ReviewView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReviewView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReviewView
      }
      
      fileprivate init() {}
    }
    
    struct _StoreAddingPanel: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "StoreAddingPanel"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StoreAddingPanel? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StoreAddingPanel
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_image' is used in nib 'StoreAddingPanel', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "underPageBackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'underPageBackgroundColor' is used in storyboard 'StoreAddingPanel', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _StoreInfoPanel: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "StoreInfoPanel"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StoreInfoPanel? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StoreInfoPanel
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_image' is used in nib 'StoreInfoPanel', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try favourites.validate()
      try goods.validate()
      try launchScreen.validate()
      try main.validate()
      try map.validate()
      try popular.validate()
      try reviews.validate()
      try search.validate()
      try settings.validate()
    }
    
    struct favourites: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let favouritesNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "FavouritesNavigationController")
      let name = "Favourites"
      
      func favouritesNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: favouritesNavigationController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.favourites().favouritesNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'favouritesNavigationController' could not be loaded from storyboard 'Favourites' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct goods: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let goodsAddingViewController = StoryboardViewControllerResource<GoodsAddingViewController>(identifier: "GoodsAddingViewController")
      let goodsViewController = StoryboardViewControllerResource<GoodsViewController>(identifier: "GoodsViewController")
      let name = "Goods"
      
      func goodsAddingViewController(_: Void = ()) -> GoodsAddingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: goodsAddingViewController)
      }
      
      func goodsViewController(_: Void = ()) -> GoodsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: goodsViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_image' is used in storyboard 'Goods', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.goods().goodsAddingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'goodsAddingViewController' could not be loaded from storyboard 'Goods' as 'GoodsAddingViewController'.") }
        if _R.storyboard.goods().goodsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'goodsViewController' could not be loaded from storyboard 'Goods' as 'GoodsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      let signInNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "SignInNavigationController")
      let signInViewController = StoryboardViewControllerResource<SignInViewController>(identifier: "SignInViewController")
      let signUpViewController = StoryboardViewControllerResource<SignUpViewController>(identifier: "SignUpViewController")
      let tabsViewController = StoryboardViewControllerResource<UIKit.UITabBarController>(identifier: "TabsViewController")
      
      func signInNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signInNavigationController)
      }
      
      func signInViewController(_: Void = ()) -> SignInViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signInViewController)
      }
      
      func signUpViewController(_: Void = ()) -> SignUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpViewController)
      }
      
      func tabsViewController(_: Void = ()) -> UIKit.UITabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabsViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'google' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().signInNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signInNavigationController' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().signInViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signInViewController' could not be loaded from storyboard 'Main' as 'SignInViewController'.") }
        if _R.storyboard.main().signUpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpViewController' could not be loaded from storyboard 'Main' as 'SignUpViewController'.") }
        if _R.storyboard.main().tabsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabsViewController' could not be loaded from storyboard 'Main' as 'UIKit.UITabBarController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct map: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let mapNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "MapNavigationController")
      let name = "Map"
      let pulleyViewController = StoryboardViewControllerResource<MapViewController>(identifier: "PulleyViewController")
      
      func mapNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mapNavigationController)
      }
      
      func pulleyViewController(_: Void = ()) -> MapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pulleyViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.map().mapNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mapNavigationController' could not be loaded from storyboard 'Map' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.map().pulleyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pulleyViewController' could not be loaded from storyboard 'Map' as 'MapViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct popular: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let name = "Popular"
      let popularNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "PopularNavigationController")
      
      func popularNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popularNavigationController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.popular().popularNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popularNavigationController' could not be loaded from storyboard 'Popular' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct reviews: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ReviewsTableViewController
      
      let bundle = R.hostingBundle
      let name = "Reviews"
      let reviewsTableViewController = StoryboardViewControllerResource<ReviewsTableViewController>(identifier: "ReviewsTableViewController")
      
      func reviewsTableViewController(_: Void = ()) -> ReviewsTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: reviewsTableViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.reviews().reviewsTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'reviewsTableViewController' could not be loaded from storyboard 'Reviews' as 'ReviewsTableViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct search: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let name = "Search"
      let searchNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "SearchNavigationController")
      
      func searchNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchNavigationController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.search().searchNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchNavigationController' could not be loaded from storyboard 'Search' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct settings: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Settings"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
